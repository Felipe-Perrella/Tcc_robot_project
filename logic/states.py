"""
logic/states.py
===============
Define os estados poss√≠veis do rob√¥ de limpeza de placas solares
"""

from enum import Enum


class RobotState(Enum):
    """
    Estados da m√°quina de estados do rob√¥.
    
    O rob√¥ opera em 2 estados principais:
    - SEARCHING: Procurando placa solar (girando)
    - MOVING_TO_TARGET: Sobre a placa (escaneando/limpando)
    
    Fluxo t√≠pico:
        SEARCHING ‚Üí (sensor detecta placa) ‚Üí MOVING_TO_TARGET
                                                    ‚Üì
                                            (a cada 15s verifica vis√£o)
                                                    ‚Üì
                                            (se sai da placa)
                                                    ‚Üì
        SEARCHING ‚Üê ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îÄ ‚îò
    """
    
    SEARCHING = "searching"
    """
    Estado: Procurando placa solar
    
    Comportamento:
    - Rob√¥ gira no pr√≥prio eixo
    - Sensor ultrass√¥nico procura placa embaixo
    - Vassouras: OFF (economizar energia)
    - Velocidade: SEARCH_SPEED (50%)
    
    Transi√ß√£o para MOVING_TO_TARGET quando:
    - Sensor ultrass√¥nico ‚â§ PANEL_DISTANCE (15cm)
    """
    
    MOVING_TO_TARGET = "moving_to_target"
    """
    Estado: Sobre a placa (escaneando ou limpando)
    
    Comportamento:
    - Rob√¥ anda para frente sobre a placa
    - Sensor ultrass√¥nico confirma presen√ßa da placa
    - A cada 15s: verifica vis√£o computacional
    - Vassouras: ON se detectou sujeira, OFF se n√£o detectou
    - Velocidade: 
      - Sem sujeira: SCAN_SPEED (40%)
      - Com sujeira: SCAN_SPEED // 3 (13% - devagar para limpar)
    
    Transi√ß√£o para SEARCHING quando:
    - Sensor ultrass√¥nico > PANEL_DISTANCE (saiu da placa)
    """
    
    STOPPED = "stopped"
    """
    Estado: Rob√¥ parado
    
    Comportamento:
    - Todos os motores parados
    - Vassouras: OFF
    - Usado apenas ao encerrar programa
    """


# Mensagens amig√°veis para cada estado (opcional, para logs)
STATE_MESSAGES = {
    RobotState.SEARCHING: "üîç Procurando placa solar...",
    RobotState.MOVING_TO_TARGET: "ü§ñ Escaneando/limpando placa",
    RobotState.STOPPED: "üõë Rob√¥ parado"
}


def get_state_message(state: RobotState) -> str:
    """
    Retorna mensagem amig√°vel para um estado.
    
    Args:
        state: Estado do rob√¥
        
    Returns:
        str: Mensagem descritiva do estado
    """
    return STATE_MESSAGES.get(state, f"Estado: {state.value}")